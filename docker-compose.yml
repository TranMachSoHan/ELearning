version: '3.3'
networks:
  my_network:
    driver: bridge
  kafka_network:
    driver: bridge

services:

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: course_eLearning
    ports:
      - "27017:27017"
    container_name: mongodb
    networks:
      - my_network
    volumes:
      - ./database-data:/data/db

  backend-user:
#    image: docker.io/maklisa2000/rmit_e_learning_user_backend
    image: rmit_e_learning_user_backend:latest
    container_name: backend-user
    restart: always
    depends_on:
      - mongodb
      - redis
    networks:
      - my_network
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=mongodb
      - DB_PORT=27017
      - DB_USER=root
      - DB_PASS=password
      - DB_NAME=course_eLearning

#  backend-course:
##    image: docker.io/maklisa2000/rmit_e_learning_course_backend
#    image: rmit_e_learning_course_backend:latest
#    container_name: backend-course
#    restart: always
#    networks:
#      - my_network
#      - kafka_network
#    depends_on:
#      - mongodb
#      - redis
#      - backend-user
#    ports:
#      - "8082:8082"
#    links:
#      - "kafka:kafka"
#    environment:
#      - DB_HOST=mongodb
#      - DB_PORT=27017
#      - DB_USER=root
#      - DB_PASS=password
#      - DB_NAME=course_eLearning

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    networks:
      - my_network
    ports:
      - "6379:6379"
    
  zookeeper:
    image: wurstmeister/zookeeper
    expose:
      - "2181"
    networks:
      - kafka_network


  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    restart: always
    container_name: kafka
    networks:
      - kafka_network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      JVM_OPTS: -Xmx1g -Xms1g -XX:MaxPermSize=1024m
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: comment
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: INSIDE://kafka:9092,OUTSIDE://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://kafka:9093
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka



volumes:
  mongodb_data_container:
  cache:
    driver: local

  # mongodb_course:
  #     image: mongo:latest
  #     environment:
  #       MONGO_INITDB_ROOT_USERNAME: root
  #       MONGO_INITDB_ROOT_PASSWORD: password
  #       MONGO_INITDB_DATABASE: course_eLearning
  #     ports:
  #       - "27018:27018"
  #     container_name: mongodb_course
  #     networks:
  #       - kong-net
  #     volumes:
  #       - ./my-database:/data/db

  # 
  
  # kong:
  #   image: kong:2.2.0
  #   environment:
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: '0.0.0.0:8001'
  #     KONG_DATABASE: "off"
  #     KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #   volumes:
  #     - ./kong/:/usr/local/kong/declarative
  #   networks:
  #     - kong-net
  #   ports:
  #     - "8000:8000/tcp"
  #     - "127.0.0.1:8001:8001/tcp"
  #     - "8443:8443/tcp"
  #     - "127.0.0.1:8444:8444/tcp"
  #   healthcheck:
  #     test: ["CMD", "kong", "health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   restart: on-failure
  #   deploy:
  #     restart_policy:
  #       condition: on-failure


